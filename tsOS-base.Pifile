# Set default ARCH
: ${ARCH:=arm64}

FROM https://downloads.raspberrypi.com/raspios_lite_${ARCH}/images/raspios_lite_${ARCH}-2025-10-02/2025-10-01-raspios-trixie-${ARCH}-lite.img.xz
TO "tsOS-base-${ARCH}.img"
PUMP 1000M

# Set os-release info
NAME="tsOS-base"
VERSION_ID=`git describe --tags --always || true`
VERSION_CODENAME=trixie

RUN tee /etc/os-release <<EOF
PRETTY_NAME="$NAME $VERSION_ID ($VERSION_CODENAME)"
NAME=$NAME
VERSION_ID=$VERSION_ID
VERSION="$VERSION_ID ($VERSION_CODENAME)"
VERSION_CODENAME=trixie
ID=debian
HOME_URL="https://trackit.systems/"
SUPPORT_URL="https://github.com/trackIT-Systems/tsOS-base"
BUG_REPORT_URL="https://github.com/trackIT-Systems/tsOS-base/issues"
EOF

#################################################
### install software

ENV PIP_ROOT_USER_ACTION ignore

# Update OS and sources
RUN apt-get update

# Install basic software
RUN apt-get install -y \
    python3 python3-pip \
    i2c-tools \
    vim \
    git \
    mosh \
    libusb-1.0-0-dev \
    zsh

RUN python3 -m pip config set global.break-system-packages true

# Install networking tools
RUN apt-get install -y \
    tcpdump \
    wireguard-tools

# Install dkms
RUN apt-get install -y dkms bc

# Install caddy
if [[ "$ARCH" == "armhf" ]]; then
    RUN bash -c "curl -L https://github.com/caddyserver/caddy/releases/download/v2.10.2/caddy_2.10.2_linux_armv7.tar.gz | tar xz caddy"
else
    RUN bash -c "curl -L https://github.com/caddyserver/caddy/releases/download/v2.10.2/caddy_2.10.2_linux_${ARCH}.tar.gz | tar xz caddy"
fi
RUN mv caddy /usr/bin/caddy
RUN groupadd --system caddy
RUN useradd --system \
    --gid caddy \
    --create-home \
    --home-dir /var/lib/caddy \
    --shell /usr/sbin/nologin \
    --comment "Caddy web server" \
    caddy

# Install filebrowser
if [[ "$ARCH" == "armhf" ]]; then
    RUN bash -c "curl -L https://github.com/filebrowser/filebrowser/releases/download/v2.43.0/linux-armv7-filebrowser.tar.gz | tar xz filebrowser"
else
    RUN bash -c "curl -L https://github.com/filebrowser/filebrowser/releases/download/v2.43.0/linux-${ARCH}-filebrowser.tar.gz | tar xz filebrowser"
fi
RUN mv filebrowser /usr/bin/filebrowser

# Install mosquitto
RUN apt-get install -y mosquitto mosquitto-clients

# Install python system packages
RUN apt-get install -y python3-dbus libdbus-glib-1-dev

# Install GPS / NTP software
RUN apt-get remove -y systemd-timesyncd
RUN apt-get install --no-install-recommends -y \
    gpsd \
    gpsd-clients \
    chrony

RUN apt-get clean

#################################################
### custom files

# Install custom folders 
INSTALL boot /boot
INSTALL etc /etc
INSTALL home /home
INSTALL var /var
INSTALL usr /usr

# Copy git repositories
RUN rm /home/pi/.oh-my-zsh/.git
INSTALL .git/modules/home/pi/.oh-my-zsh /home/pi/.oh-my-zsh/.git
RUN rm /home/pi/Witty-Pi-4/.git
INSTALL .git/modules/home/pi/Witty-Pi-4 /home/pi/Witty-Pi-4/.git
RUN rm /home/pi/pymqttutil/.git
INSTALL .git/modules/home/pi/pymqttutil /home/pi/pymqttutil/.git
RUN rm /home/pi/pysmartsolar/.git
INSTALL .git/modules/home/pi/pysmartsolar /home/pi/pysmartsolar/.git
RUN rm /home/pi/tsconfig/.git
INSTALL .git/modules/home/pi/tsconfig /home/pi/tsconfig/.git
RUN rm /home/pi/uhubctl/.git
INSTALL .git/modules/home/pi/uhubctl /home/pi/uhubctl/.git
RUN rm /home/pi/vedirect_dump/.git
INSTALL .git/modules/home/pi/vedirect_dump /home/pi/vedirect_dump/.git
RUN rm /home/pi/wittypi4/.git
INSTALL .git/modules/home/pi/wittypi4 /home/pi/wittypi4/.git

# Fix permissions for pi user
RUN chown -R pi:pi /home/pi/

# Mount boot writable for users
RUN sed -i 's/\(boot.*vfat.*defaults\)/\1,user,umask=000/g' /etc/fstab

# Mount data partition Mount
RUN bash <<EOF
DEVUUID=\`grep /boot/firmware /etc/fstab\`
echo "\${DEVUUID:0:17}-03  /mnt/sdhc       exfat   defaults,user,umask=000,nofail,x-mount.mkdir,x-systemd.device-timeout=5  0       2" | tee -a /etc/fstab
EOF

RUN tee -a /etc/fstab <<EOF
# mounts for user-access
/dev/sda1             /mnt/usb        auto    defaults,user,umask=000,nofail,x-mount.mkdir,x-systemd.device-timeout=5  0       2
/boot/firmware        /mnt/boot       none    defaults,bind,x-mount.mkdir       0       0

# oportunistic /data bind-mounts
#/mnt/usb              /data           none    defaults,bind,nofail,x-mount.mkdir       0       0
/mnt/sdhc             /data           none    defaults,bind,x-mount.mkdir       0       0
EOF

#################################################
### basic configuration

# Fix permissions on host ssh files
RUN bash -c 'chown root:root /etc/ssh/ssh_host_*'
RUN bash -c 'chmod 600 /etc/ssh/ssh_host_*_key'
RUN bash -c 'chmod 644 /etc/ssh/ssh_host_*_key.pub'
RUN systemctl disable regenerate_ssh_host_keys

# Install user ssh files and fix permissions
INSTALL home/pi/.ssh /home/pi/.ssh
RUN chown pi:pi /home/pi
RUN chown pi:pi /home/pi/.ssh
RUN chown pi:pi /home/pi/.ssh/authorized_keys
RUN chmod 755   /home/pi
RUN chmod 700   /home/pi/.ssh
RUN chmod 644   /home/pi/.ssh/authorized_keys

# Install root ssh files and fix permissions
INSTALL home/pi/.ssh /root/.ssh
RUN chown root:root /root
RUN chown root:root /root/.ssh
RUN chown root:root /root/.ssh/authorized_keys
RUN chmod 755       /root
RUN chmod 700       /root/.ssh
RUN chmod 644       /root/.ssh/authorized_keys

# Enable copy-authorized-keys
RUN systemctl enable copy-authorized-keys.service
RUN systemctl enable copy-authorized-keys.path

# Set default password
RUN bash -c 'echo -n "pi:" > /boot/firmware/userconf.txt'
RUN bash -c 'echo "natur" | openssl passwd -6 -stdin >> /boot/firmware/userconf.txt'
RUN rm /etc/ssh/sshd_config.d/rename_user.conf

# Change default shell for pi user
RUN chsh -s /bin/zsh pi

# Allow basic connectivity (0 == success status code - enable)
RUN raspi-config nonint do_ssh 0

RUN raspi-config nonint do_i2c 0

# Disable Swap
RUN systemctl mask rpi-resize-swap-file.service

# Enable persistent journal
RUN rm /usr/lib/systemd/journald.conf.d/40-rpi-volatile-storage.conf

# Unblock bluetooth hci0 on pi3 and pi4
RUN tee /var/lib/systemd/rfkill/platform-soc-amba-3f201000.serial:bluetooth <<<0
RUN tee /var/lib/systemd/rfkill/platform-soc-amba-fe201000.serial:bluetooth <<<0

# disable unnecessary services
RUN systemctl disable e2scrub_reap.service 
RUN systemctl disable rpi-eeprom-update.service
RUN systemctl disable apt-daily.timer
RUN touch /etc/cloud/cloud-init.disabled

# rebuild initramfs
RUN update-initramfs -k all -u -v

# install gitui
RUN bash -c "wget -O- https://github.com/gitui-org/gitui/releases/download/v0.27.0/gitui-linux-aarch64.tar.gz | tar -xzC /usr/local/bin/"

# enable hostname-config script and set default hostname
RUN systemctl enable hostname-config.service

# Enabling wait for time-sync.target (depending services will not start before the clock is synced)
RUN systemctl enable chrony-waitsync.service

# Set build-timestamp to last known time
RUN touch /var/lib/systemd/timesync/clock

# Reboot on kernel panic
RUN bash -c "echo kernel.panic=10 | tee -a /etc/sysctl.conf"

# Install dependenies & enable WittyPi
RUN cp -R /home/pi/wittypi4/rtc-pcf85063-wittypi4 /usr/src/rtc-pcf85063-wittypi4-6.12.y
RUN bash -c 'for k in /lib/modules/6.12.*; do dkms install -k $(basename $k) rtc-pcf85063-wittypi4/6.12.y; done'

### compile overlays and enable hardware
RUN dtc -O dtb -o /boot/firmware/overlays/wittypi4.dtbo /home/pi/wittypi4/wittypi4-overlay.dts

# enable otg mode on pi4
RUN tee -a /boot/firmware/config.txt <<EOF
[pi4]
otg_mode=1

EOF

### enable wittypi on pi3 and pi4
RUN tee -a /boot/firmware/config.txt <<EOF
[pi4]
dtoverlay=wittypi4
dtoverlay=gpio-shutdown,gpio_pin=4,debounce=0,gpio_pull=up,active_low=1
dtoverlay=gpio-led,gpio=17,label=sysup,trigger=heartbeat

[pi3]
dtoverlay=wittypi4
dtoverlay=gpio-shutdown,gpio_pin=4,debounce=0,gpio_pull=up,active_low=1
dtoverlay=gpio-led,gpio=17,label=sysup,trigger=heartbeat

[all]
EOF

### install python daemon
RUN python3 -m pip install -e /home/pi/wittypi4
RUN systemctl enable wittypid.service

#################################################
### network configuration

RUN raspi-config nonint do_wifi_country "DE"

# enable wireguard
RUN ln -s /boot/firmware/wireguard.conf /etc/wireguard/wireguard.conf
RUN systemctl enable wg-quick@wireguard

# disable resolv.conf altering
RUN chattr +i /etc/resolv.conf

#################################################
### services configuration

# install and enable enable tsconfig
RUN apt-get install -y portaudio19-dev
RUN python3 -m pip install -e /home/pi/tsconfig
RUN systemctl enable tsconfig tsconfig-ble

# enable caddy
RUN systemctl enable caddy

# enable filebrowser
RUN systemctl enable filebrowser

# enable mosquitto
RUN systemctl enable mosquitto.service

# Install pysmartsolar
RUN python3 -m pip install -e /home/pi/pysmartsolar

# Install vedirect_dump
RUN python3 -m pip install -e /home/pi/vedirect_dump

# Install and enable pymqttutil
RUN python3 -m pip install -e /home/pi/pymqttutil
RUN python3 -m pip install psutil
RUN systemctl enable mqttutil.service

# Enable dmesgdump
RUN systemctl enable dmesgdump

# Install uhubctl (dependency) and enable huaweicheck
RUN bash -c 'cd /home/pi/uhubctl; make; make install'
# RUN systemctl enable huaweicheck.timer
RUN systemctl enable brovi_startup.service

# Blacklist DVB-T driver
RUN tee -a /etc/modprobe.d/raspi-blacklist.conf <<<'blacklist dvb_usb_rtl28xxu'

# Configure hardware connectivity
RUN raspi-config nonint do_serial_hw 0
RUN raspi-config nonint do_serial_cons 1

RUN systemctl disable serial-getty@ttyS0.service

# Enable UART0 on GPIO header in RPi5 
RUN tee -a /boot/firmware/config.txt <<<dtoverlay=uart0-pi5

# Enable gpsd
RUN systemctl enable gpsd

# Enable i2s
RUN sed -i 's/#dtparam=i2s=on/dtparam=i2s=on/' /boot/firmware/config.txt
